{
  "hero.main.title": "一个基于react的可受控可扩展的轻量级表单库。",
  "hero.main.desc": "采用声明式渲染, 以最快的速度以及最精简的代码渲染出一个可受控的表单。React-form-simple除了集成自身功能之外,还具有非常可扩展的接口, 并可与第三方ui集成使用。",
  "hero.action.button.start": "开始",
  "hero.feature.APITitle": "API设计",
  "hero.feature.API": "名称简单且完整的API设计, 可以构建个性化表单。",
  "hero.feature.codeTitle": "简约代码",
  "hero.feature.code": "简单的几行代码, 就可使表单成为受控,无需开发人员关心受控过程。",
  "hero.feature.speedTitle": "响应速度",
  "hero.feature.speed": "T渲染完全隔离, 快速的响应表单内容的输入。",
  "hero.feature.interfaceTilte": "接口扩展",
  "hero.feature.interface": "易于扩展, 提供生命周期, 使开发人员定制自己的表单以及受控逻辑。",
  "hero.feature.layoutTitle": "页面布局",
  "hero.feature.layout": "灵活自由的布局组合, 提供布局props, 开发人员可无需手写布局, 也可自由布置。",
  "hero.feature.typeTitle": "类型推断",
  "hero.feature.type": "提供完整的类型推断, 表单模型数据推断。",
  "hero.feature.sandPackage": "在线小试",
  "footer.desc.star.text": "如果让你的表单开发变得更加容易，请给我们加颗星",
  "footer.desc.issue.text": "如果你在使用过程中遇到了困难，请给我们提",
  "API.useForm.render.desc": "表单项渲染函数，接收两个参数，第一个参数为表单项字段，第二个参数为表单项配置。<div>更多配置：<a href='/zh-CN/intro/api#formitem'>FormItem</a</div>",
  "API.useForm.render.args.config.defineProps": "在表单项内部状态发生改变需要根据这些状态定义相应的prop传给渲染控件的时候调用。",
  "API.useForm.useSubscribe.desc": "订阅表单项或者整个表单的hook。接收一个函数，这个函数的返回参数是表单最新的模型数据。返回值则是需要被订阅的数据。",
  "API.useForm.useWatch.desc": "观测表单数据变化的hook。接收两个函数，第一个函数返回需要被观察的模型数据，第二个参数为被观测的模型数据发生改变时执行的回调。观察多个数据的话第一个函数需要返回一个数组。如果只观察一个，允许返回一个字符串。第二个函数会返回两个回调参数，第一个参数为改变后的value，第二个参数为改变前的value，返回的参数类型将会根据第一个函数的返回值类型来，如果第一个函数返回的是字符串的话，那回调参数的类型也将是value，否则就是数组。",
  "API.useForm.model.desc": "表单模型数据。model的值永远是表单项受控后最新的值。在提交表单数据和在受控表单项内部值的时候，通常会用到model。但是请不要用它来在表单项外部来用它重新渲染视图，它不会重新表单外部的视图渲染。如果需要在外部用最新的值来渲染，请使用useSubscribe来订阅值。",
  "API.useForm.setState.desc": "手动重新渲染视图。如果在外部需要重新渲染视图，可以调用setState让当前组件树重新渲染。",
  "API.event.onChange.tag.type.desc": "表单项渲染的控件value改变后如果要确定具体控件类型所接收的可选值，默认取的是onChange标准事件对象的target.type。",
  "API.form.share.validate.desc": "表单校验。返回一个Promise，如果全部校验通过，会执行<strong>.then()</strong>，否则会执行<strong>.catch()</strong>并将错误信息在<strong>.catch</strong>(err => {})里返回出来。",
  "API.form.share.reset.desc": "重置表单，只有当表单项传入了defaultValue时，该表单项才能被reset。使用useForm时，内部已经默认使用defaultValue。也可以在render函数的参数里传入defaultValue覆盖默认值。使用FormItem的时候需要手动传入。",
  "API.form.clearValidate.desc": "清除校验信息，只是清除校验时产生的错误，校验器依然存在。接收对应的表单项字段，可以为单个字段，也可以是字段的集合，如果不传bindId，则会清除整个表单的校验信息。",
  "API.form.removeValidator.desc": "移除校验器。调用此方法后，表单项后续的校验将不会触发。接收对应的表单项字段，可以为单个字段，也可以是字段的集合，如果不传bindId，则会移除整个表单的校验。",
  "API.form.reapplyValidator.desc": "重新添加校验器。当调用removeValidator后，如果需要重新校验，可以调用这个方法。接收对应的表单项字段，可以为单个字段，也可以是字段的集合，如果不传bindId，则会重新申请整个表单的校验。",
  "API.form.setValue.desc": "设置表单项的内部的value，将会将所设置的value传给渲染控件，以达到受控，使用useForm时，这个API通常会用不到。",
  "API.form.setValues.desc": "设置表单项的内部的value，将会将所设置的value传给渲染控件，以达到受控。与setValue不同的是，这个API接收一个对象，这个对象是表单字段与value的集合，比如<strong>setValues</strong>({ field: value })。",
  "API.formItem.clearValidate.desc": "清除校验信息，只是清除校验时产生的错误，校验器依然存在。",
  "API.formItem.removeValidator.desc": "移除校验器。调用此方法后，表单项后续的校验将不会触发。",
  "API.formItem.setValue.desc": "设置表单项的内部的value，将会将所设置的value传给渲染控件，以达到受控，使用useForm时，这个API通常会用不到。",
  "API.formItem.reapplyValidator.desc": "重新添加校验器。当调用removeValidator后，如果需要重新校验，可以调用这个方法。",
  "API.formItem.setError.desc": "手动调用设置错误提示信息，不会触发onError事件。",
  "API.form.global.props.GetContentOptionsAttrs.onChange.desc": "传给UI控件的onChange事件，方法接收两个参数，第一个参数为事件的标准对象，如果你UI控件不是基于事件标准对象，请传入formatChangeValue告诉表单项要取哪个值，或者可以在控件onChange之后，传给表单项之前做做一层中间代理，处理完逻辑后，手动调用attrs.onChange({ target: value })。第二个参数是UI控件类型，React-form-simple默认取事件对象里的value和type来做判断，如果你的UI控件是checkBox且不是基于标准事件对象且他的受控属性不是value且，那么需要传第二个参数为checkbox。",
  "API.form.global.props.GetContentOptionsAttrs.onBlur.desc": "传给UI控件的onBlur事件。这个方法不接收任何参数",
  "API.form.global.props.GetContentOptionsAttrs.value.desc": "传给UI控件的value。",
  "API.form.global.props.GetContentOptionsAttrs.readOnly.desc": "传给UI控件的readOnly。",
  "API.form.global.props.GetContentOptionsAttrs.checked.desc": "传给UI控件的checked属性，checked的选中根据value值存在来，如果value的值是有意义的，即value有值的情况下，则为true。",
  "API.form.global.props.GetContentOptions.model.desc": "当前表单项的表单模型数据，只包含当前表单项的value，这个value是可控的，可以直接通过model[bindId]=xxx来触发当前表单项的重新渲染。如果需要使用更多的表单字段，请使用useForm暴露出的model或者useSubscribe订阅字段。",
  "API.form.global.props.GetContentOptions.bindId.desc": "当前表单项的表单字段。",
  "API.form.global.props.GetContentOptions.isError.desc": "当前表单项的校验状态，有校验不通过的情况下为true。",
  "API.form.global.props.GetContentOptions.attrs.desc": "控件基本属性，在表单项渲染中，会将如上属性传递给你的UI控件。如果你的UI控件不是基于这些属性，请使用FormItem针对你的UI做一层封装。",
  "API.form.global.props.ApiEffectOptions.uid.desc": "当前表单项uid。",
  "API.form.global.props.ContextProps.mounted.desc": "每个表单项挂载之后执行的生命周期。在渲染中只会执行一次。可以在这里对表单项执行依赖收集或者初始化操作。回调出一个options对象，里面包含该表单项的bindId和该表单项的uid。",
  "API.form.global.props.ContextProps.apiEffect.desc": "表单项api或者bindId发生变动后触发的方法，初始化会执行一次。一般不会发生变动，可以在这里对api进行收集。",
  "API.form.global.props.ContextProps.updated.desc": "表单项监听控件value发生改变时触发的方法，<strong>只有当手动去输入的时候，这个方法才会执行</strong>。可以在这里对自定义的外部表单model数据进行赋值。以达到受控的效果。",
  "API.form.global.props.ContextProps.reset.desc": "调用表单reset方法时触发的方法。可以在这里给表单项赋值默认值。",
  "API.form.global.props.ContextProps.destroy.desc": "表单项销毁时触发的方法。",
  "API.form.global.props.form.share.errorStyle": "错误提示信息样式，支持对象嵌套写法。",
  "API.form.global.props.form.share.labelPosition": "标签位置。",
  "API.form.global.props.form.share.labelStyle": "标签样式，支持对象嵌套写法。",
  "API.form.global.props.form.share.labelWidth": "标签宽度。",
  "API.form.global.props.form.share.formItemStyle": "表单项样式，支持对象嵌套写法。",
  "API.form.global.props.form.share.trigger": "触发校验事件。",
  "API.form.global.props.form.share.contentStyle": "表单项内容样式，支持对象嵌套写法。",
  "API.form.global.props.form.share.fullWidth": "表单项宽度是否撑满整。",
  "API.form.global.props.form.share.contextProps": "表单项选项式生命周期。对整个表单进行依赖收集的地方，可以在这里对表单项做一些更加精确的控制。使用 useForm 时，通常不会需要这个。使用 FormItem 或者 Form 时或者定制化表单时，需要用到这个。当 useForm 与 Form 或者 FormItem 结合使用的时候，需要将 useForm 暴露出的 contextProps 传递给组件来进行依赖收集，也可以在你的代码里做一层代理执行某些逻辑后，在执行 contextProps 里的生命周期达到自定义的控制。",
  "API.form.global.props.form.share.readOnly": "表单项是否只读，会将这个属性传递给表单项的渲染控件。如果不支持readOnly属性，则需要在外部做一层转换。",
  "API.form.global.props.form.share.readOnlyText": "自定义只读状态下显示的内容",
  "API.form.global.props.form.share.formatChangeValue": "格式化控件的value值, react-form-simple的内部表单项默认取的是标准事件对象里的value ,即<strong>e.target.value</strong>, 如果你的控件是这个上面做了一层封装返回的不是标准事件对象，需要传入这个方法，react-form-simple的表单项的value将会获取这个方法的返回值。<div>用法：<a href='/zh-CN/intro/introduce#集成第三方-ui'>集成第三方UI</a></div>",
  "API.form.global.props.form.formStyle": "表单样式，支持对象嵌套写法。",
  "API.form.global.props.form.direction": "表单整体布局方向。",
  "API.form.global.props.formItem.rules": "表单项校验规则，如果为空数组或者没值，表单项将不会校验。",
  "API.form.global.props.formItem.bindId": "表单项绑定的字段名，用来标识表单项的唯一性，如果存在useForm，需要与useForm里的字段名对应。要使表单项受控，这个必传。",
  "API.form.global.props.formItem.onError": "表单项校验不通过时的回调函数。",
  "API.form.global.props.formItem.customErrTips": "是否自定义错误信息提示，为true后表单项默认不会显示错误信息。将会交给外部处理。",
  "API.form.global.props.formItem.defaultValue": "表单项内容显示的默认值，reset时存在该值当前表单项才能被重置。使用useForm的话，在内部默认使用了defaultValue。可以在调用render的时候传入defaultValue覆盖它。使用FormItem组件的时候，需要手动传入。",
  "API.form.global.props.formItem.requireIndicator": "表单项必填指示器。",
  "API.form.global.props.formItem.label": "表单项标签。",
  "API.form.global.props.formItem.getContent": "使用 FormItem 组件形式创建一个受控表单项时，需要传入这个方法，方法返回需要渲染的内容。getContent 的参数包含有该表单项的 API、该表单项的模型数据、校验状态以及符合原生属性的 attrs，开发者可以针对这些参数做相应的逻辑处理。在参数返回的表单项 API 中，开发者可以直接调用来触发该表单项的对应事件以达到更精确更细度的控制。"
}