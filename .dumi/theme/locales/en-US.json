{
  "hero.main.title": "A controllable and scalable lightweight form library based on React.",
  "hero.main.desc": "Using declarative rendering to render a controllable form at the fastest speed and with the most concise code. In addition to integrating its own functions, React form simple also has very scalable interfaces and can be integrated with third-party UI for use.",
  "hero.action.button.start": "Get Start",
  "hero.feature.APITitle": "Api Design",
  "hero.feature.API": "A simple and complete API design that can build personalized forms.",
  "hero.feature.codeTitle": "Minimalist Code",
  "hero.feature.code": "A few simple lines of code can make the form controlled, without the need for developers to care about the controlled process.",
  "hero.feature.speedTitle": "Response Speed",
  "hero.feature.speed": "The rendering is completely isolated and responds quickly to the input of form content.",
  "hero.feature.interfaceTilte": "Interface Extension",
  "hero.feature.interface": "Easy to expand, providing a lifecycle for developers to customize their own forms and controlled logic.",
  "hero.feature.layoutTitle": "Page Layout",
  "hero.feature.layout": "Flexible and free layout combination, providing layout tips, developers can freely arrange without the need for handwritten layouts.",
  "hero.feature.typeTitle": "Type Inference",
  "hero.feature.type": "Provide complete type inference and form model data inference.",
  "hero.feature.sandPackage": "Online quiz",
  "footer.desc.star.text": "If it makes your form development easier, please add a star to us",
  "footer.desc.issue.text": "If you encounter difficulties during use, please let us know",
  "API.useForm.render.desc": "The form item rendering function accepts two parameters, the first parameter is the form item field, and the second parameter is the form item configuration.<div>More configurations: <a href='/intro/api#formitem'>FormItem</a></div>",
  "API.useForm.render.args.config.defineProps": "It is called when the internal state of the form item changes and it is necessary to define corresponding props based on these states and pass them to the rendering control.",
  "API.useForm.useSubscribe.desc": "Subscribe to hooks for form items or the entire form. Receives a function whose return parameter is the latest model data of the form. The return value is the data that needs to be subscribed.",
  "API.useForm.useWatch.desc": "A hook for observing changes in form data. Receive two functions, the first function returns the model data that needs to be observed, and the second parameter is the callback executed when the observed model data changes. If you want to observe multiple data, the first function needs to return an array. Allows returning a string if only one is observed. The second function will return two callback parameters. The first parameter is the value after the change, and the second parameter is the value before the change. The returned parameter type will be based on the return value type of the first function. If If a function returns a string, the type of the callback parameter will also be value, otherwise it will be an array.A hook for observing changes in form data. Receive two functions, the first function returns the model data that needs to be observed, and the second parameter is the callback executed when the observed model data changes. If you want to observe multiple data, the first function needs to return an array. Allows returning a string if only one is observed. The second function will return two callback parameters. The first parameter is the value after the change, and the second parameter is the value before the change. The returned parameter type will be based on the return value type of the first function. If If a function returns a string, the type of the callback parameter will also be value, otherwise it will be an array.",
  "API.useForm.model.desc": "Form model data. The value of the model is always the latest value after the form item is controlled. Model is usually used when submitting form data and internal values in controlled form items. But please don't use it to re-render the view outside the form item, it will not re-render the view outside the form. If you need to render the latest value externally, use useSubscribe to subscribe to the value.",
  "API.useForm.setState.desc": "Manually re-render the view. If you need to re-render the view externally, you can call setState to re-render the current component tree.",
  "API.event.onChange.tag.type.desc": "If you want to determine the optional value received by a specific control type after the value of the control rendered by the form item changes, the default value is the target.type of the onChange standard event object.",
  "API.form.share.validate.desc": "Form validation. Returns a Promise. If all verifications pass, <strong>.then()</strong> will be executed. Otherwise, <strong>.catch()</strong> will be executed and the error message will be in <strong>.catch</strong>. strong>(err => {}) to return it.",
  "API.form.share.reset.desc": "Reset the form. Only when the form item passes defaultValue, the form item can be reset. When using useForm, defaultValue is already used by default internally. You can also pass defaultValue in the parameters of the render function to override the default value. When using FormItem, you need to pass it in manually.",
  "API.form.clearValidate.desc": "Clearing the verification information only clears the errors generated during verification, and the verifier still exists. Receive the corresponding form item field, which can be a single field or a collection of fields. If the bindId is not passed, the verification information of the entire form will be cleared.",
  "API.form.removeValidator.desc": "Remove validator. After calling this method, subsequent validation of the form item will not be triggered. Receive the corresponding form item field, which can be a single field or a collection of fields. If the bindId is not passed, the verification of the entire form will be removed.",
  "API.form.reapplyValidator.desc": "Add the validator again. After calling removeValidator, if you need to re-verify, you can call this method. Receive the corresponding form item field, which can be a single field or a collection of fields. If the bindId is not passed, verification of the entire form will be reapplied.",
  "API.form.setValue.desc": "Setting the internal value of the form item will pass the set value to the rendering control to achieve control. When using useForm, this API is usually not used.",
  "API.form.setValues.desc": "Setting the internal value of the form item will pass the set value to the rendering control to achieve control. Different from setValue, this API receives an object, which is a collection of form fields and values, such as <strong>setValues</strong>({ field: value }).",
  "API.formItem.clearValidate.desc": "Clearing the verification information only clears the errors generated during verification, and the verifier still exists.",
  "API.formItem.removeValidator.desc": "Remove validator. After calling this method, subsequent validation of the form item will not be triggered.",
  "API.formItem.setValue.desc": "Setting the internal value of the form item will pass the set value to the rendering control to achieve control. When using useForm, this API is usually not used.",
  "API.formItem.reapplyValidator.desc": "Add the validator again. After calling removeValidator, if you need to re-verify, you can call this method.",
  "API.formItem.setError.desc": "Manually calling to set the error message will not trigger the onError event.",
  "API.form.global.props.GetContentOptionsAttrs.onChange.desc": "Passed to the onChange event of the UI control, the method receives two parameters. The first parameter is the standard object of the event. If your UI control is not based on the event standard object, please pass in formatChangeValue to tell the form item which value to take, or you can specify it in the control. After onChange, make an intermediate proxy before passing it to the form item. After processing the logic, manually call attrs.onChange({ target: value }). The second parameter is the UI control type. React-form-simple defaults to the value and type in the event object for judgment. If your UI control is a checkBox and is not based on a standard event object and its controlled property is not value, Then you need to pass the second parameter as checkbox.",
  "API.form.global.props.GetContentOptionsAttrs.onBlur.desc": "The onBlur event passed to the UI control. This method does not receive any parameters.",
  "API.form.global.props.GetContentOptionsAttrs.value.desc": "The value passed to the UI control.",
  "API.form.global.props.GetContentOptionsAttrs.readOnly.desc": "ReadOnly passed to the UI control.",
  "API.form.global.props.GetContentOptionsAttrs.checked.desc": "Passed to the checked attribute of the UI control, the checked selection is based on the existence of the value. If the value of the value is meaningful, that is, if the value has a value, it will be true.",
  "API.form.global.props.GetContentOptions.model.desc": "The form model data of the current form item only contains the value of the current form item. This value is controllable and can directly trigger the re-rendering of the current form item through model[bindId]=xxx. If you need to use more form fields, please use the model exposed by useForm or useSubscribe subscription fields.",
  "API.form.global.props.GetContentOptions.bindId.desc": "The form field for the current form item.",
  "API.form.global.props.GetContentOptions.isError.desc": "The verification status of the current form item. It is true if the verification fails.",
  "API.form.global.props.GetContentOptions.attrs.desc": "The basic properties of the control. During form item rendering, the above properties will be passed to your UI control. If your UI control is not based on these properties, please use FormItem to encapsulate your UI.",
  "API.form.global.props.ApiEffectOptions.uid.desc": "The current form item uid.",
  "API.form.global.props.ContextProps.mounted.desc": "The life cycle executed after each form item is mounted. Will only be executed once during rendering. You can perform dependency collection or initialization operations on form items here. Callback an options object, which contains the bindId of the form item and the uid of the form item.",
  "API.form.global.props.ContextProps.apiEffect.desc": "The method triggered after the form item api or bindId changes will be executed once during initialization. Generally there will be no changes, and the API can be collected here.",
  "API.form.global.props.ContextProps.updated.desc": "A method that is triggered when the form item monitors the value of the control. <strong>This method will only be executed when manually input</strong>. Customized external form model data can be assigned here. to achieve a controlled effect.",
  "API.form.global.props.ContextProps.reset.desc": "Method triggered when the form reset method is called. You can assign default values to form items here.",
  "API.form.global.props.ContextProps.destroy.desc": "Method triggered when the form item is destroyed.",
  "API.form.global.props.form.share.errorStyle": "Error message style, supports object nesting writing method.",
  "API.form.global.props.form.share.labelPosition": "label position.",
  "API.form.global.props.form.share.labelStyle": "Label style, supports object nesting writing method.",
  "API.form.global.props.form.share.labelWidth": "Label width.",
  "API.form.global.props.form.share.formItemStyle": "Form item style, supports object nesting writing method.",
  "API.form.global.props.form.share.trigger": "Trigger verification event.",
  "API.form.global.props.form.share.contentStyle": "Form item content style, supports object nesting writing method.",
  "API.form.global.props.form.share.fullWidth": "Whether the width of the form item fills the entire row.",
  "API.form.global.props.form.share.contextProps": "Form item option life cycle. Where dependencies are collected for the entire form, you can have more precise control over the form items. When using useForm, you generally won't need this. You need to use this when using FormItem or Form or when customizing the form. When useForm is used in conjunction with Form or FormItem, you need to pass the contextProps exposed by useForm to the component for dependency collection. You can also create a layer of proxy in your code to execute certain logic, and then execute the life cycle in contextProps. Achieve customized control.",
  "API.form.global.props.form.share.readOnly": "Whether the form item is read-only will pass this property to the form item's rendering control. If the readOnly attribute is not supported, an external conversion is required.",
  "API.form.global.props.form.share.readOnlyText": "Customize content displayed in read-only state.",
  "API.form.global.props.form.share.formatChangeValue": "Format the value of the control. The internal form item of react-form-simple defaults to the value in the standard event object, that is, <strong>e.target.value</strong>. If your control does this What is returned by one layer of encapsulation is not a standard event object. This method needs to be passed in. The value of the react-form-simple form item will get the return value of this method.<div>usage: <a href='/intro/introduce#third-party-ui'>Third-party UI</a></div>",
  "API.form.global.props.form.formStyle": "Form style supports object nested writing.",
  "API.form.global.props.form.direction": "Overall form layout direction.",
  "API.form.global.props.formItem.rules": "Form item verification rules, if it is an empty array or has no value, the form item will not be verified.",
  "API.form.global.props.formItem.bindId": "The field name bound to the form item is used to identify the uniqueness of the form item. If useForm exists, it needs to correspond to the field name in useForm. To make the form item controlled, this must be passed.",
  "API.form.global.props.formItem.onError": "Callback function when form item verification fails.",
  "API.form.global.props.formItem.customErrTips": "Whether to customize error message prompts. If true, the form item will not display error messages by default. will be handled externally.",
  "API.form.global.props.formItem.defaultValue": "The default value displayed in the form item content. Only when this value exists during reset can the current form item be reset. When using useForm, defaultValue is used by default internally. You can override it by passing defaultValue when calling render. When using the FormItem component, you need to pass it in manually.",
  "API.form.global.props.formItem.requireIndicator": "Form item required indicator.",
  "API.form.global.props.formItem.label": "Form item label.",
  "API.form.global.props.formItem.getContent": "When using the FormItem component to create a controlled form item, you need to pass in this method, which returns the content that needs to be rendered. The parameters of getContent include the form item's API, the form item's model data, verification status, and attrs that conform to native attributes. Developers can perform corresponding logical processing on these parameters. In the form item API returned by the parameter, developers can directly call it to trigger the corresponding event of the form item to achieve more precise and detailed control."
}